# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config.gni")

config("compiler_defaults") {
  include_dirs = [ "//include" ]
  defines = [
      "LK=1",
  ]
  if (is_debug) {
    defines += [
      "LK_DEBUGLEVEL=${debug_level}",
    ]
  }
  defines += kernel_defines

  cflags = [
    "-O2",
    "-g",
    "-finline",
    "-W",
    "-Wall",
    "-Wno-multichar",
    "-Wno-unused-parameter",
    "-Wno-unused-function",
    "-Wno-unused-label",
    "-Werror=return-type",
  ]
  cflags_c = [
    "--std=gnu11",
  ]
  cflags_cc = [
    "--std=c++11",
    "-fno-exceptions",
    "-fno-rtti",
    "-fno-threadsafe-statics",
  ]
  asmflags = [
    "-DASSEMBLY",
  ]

  if (target_cpu == "x64") {
    include_dirs += [ "//arch/x86/include" ]
    defines += [
      "ARCH_X86_64=1",
      "IS_64BIT=1",
      "ARCH=\"x86\"",
      "PLATFORM=\"X86_64\"",
      "PLATFORM_HAS_DYNAMIC_TIMER=1",
      "PROJECT=\"pc-x86-64-test\"",
      "TARGET=\"pc-x86\"",
      "X86_WITH_FPU",
    ]
    if (with_smp) {
      defines += [
        "WITH_SMP=1",
        "SMP_MAX_CPUS=16",
      ]
    } else {
      defines += [
        "SMP_MAX_CPUS=1",
      ]
    }
    cflags += [
      "-fasynchronous-unwind-tables",
      "-gdwarf-2",
      "-fno-pic",
      "-mcmodel=kernel",
    ]
    cflags_c += [
      "-fno-stack-protector",
    ]
  } else if (target_cpu == "arm64") {
    include_dirs += [ "//arch/arm64/include" ]
    defines += [
      "ARM64_CPU_CORTEX_A53=1",
      "ARCH_ARM64=1",
      "ARM_ISA_ARMV8=1",
      "IS_64BIT=1",
      "ARCH_DEFAULT_STACK_SIZE=4096",
      "PLATFORM_HAS_DYNAMIC_TIMER=1",
      "PLATFORM_SUPPORTS_PANIC_SHELL=1",
      "MMU_WITH_TRAMPOLINE=1",
      "ARCH=\"arm64\"",
      "ARM_CPU=\"cortex-a53\"",
      "PLATFORM=\"qemu-virt\"",
      "PROJECT=\"qemu-virt-a53-test\"",
      "TARGET=\"qemu-virt\"",
    ]
    if (with_smp) {
      defines += [
        "WITH_SMP=1",
        "SMP_MAX_CPUS=4",
        "SMP_CPU_CLUSTER_SHIFT=8",
        "SMP_CPU_ID_BITS=24",
      ]
    } else {
      defines += [
        "WITH_SMP=0",
      ]
    }
  }
}

config("executable_ldconfig") {
  ldflags = [
    "-nostdlib"
  ]
  if (target_cpu == "x64" || target_cpu == "arm64") {
    ldflags += [
      "-z", "max-page-size=4096",
    ]
  }
}

config("strict_compiler_flags") {
  cflags_c = [
    "-Werror-implicit-function-declaration",
    "-Wstrict-prototypes",
    "-Wwrite-strings",
  ]
}
